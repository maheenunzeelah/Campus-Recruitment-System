var jwt = require('jsonwebtoken');
const express=require('express');
const router=express.Router();
const Company=require("./model/Company");
const Jobs=require("./model/JobPosted");
const AppliedJob=require("./model/AppliedJob");
const Users=require("./model/Users");
const mongoose=require('mongoose');

router.get('/compList',(req,res)=>{
    var token=req.headers['authorization'];
    try {
        var decoded = jwt.verify(token, 'shhhh');
        Company.find((error,response)=>{
           if(error){
               res.status(500);
               res.send(error);
               return
           }
        
       res.send(response);
        })
       
      } 
    catch(err) {
        res.status(401).send(err);
      }
    
    
})
router.get('/jobList',(req,res)=>{
    var token=req.headers['authorization'];
    try {
        var decoded = jwt.verify(token, 'shhhh');
        Jobs.find((error,response)=>{
           if(error){
               res.status(500);
               res.send(error);
               return
           }
        console.log(response);
       res.send(response);
        })
       
      } 
    catch(err) {
        res.status(401).send(err);
      }
    
    
})
router.get('/jobDetails/:id',(req,res)=>{
    let id=req.params.id;
    console.log(id);
    id=mongoose.Types.ObjectId(id);
    var token=req.headers['authorization'];
    try {
        var decoded = jwt.verify(token, 'shhhh');
        Jobs.findById(id)
        .populate("company").exec(function(err,job){
            if(err) return handleError(err);
            // console.log(job.company.name);
            console.log(job);
            res.send(job);
        })
       
      } 
    catch(err) {
        res.status(401).send(err);
      }
    
    
})
router.post('/applyjob',(req,res)=>{
    
    
    const token=req.headers['authorization'];
    try {
        const decoded = jwt.verify(token, 'shhhh');
        let data=req.body;
        data.student=decoded.userid;
        const query={
            student:decoded.userid
        }
        AppliedJob.find(query,(error,response)=>{
            if(error){
                res.status(500);
                res.send(error);
                return
            }
            if(!response.length){
                var applyjob=new AppliedJob(data);
               applyjob.save().
              then(resolve=>{
              console.log("Resolve", resolve);
              res.send("Applied");
         })
            }
            else{
                res.send("Already applied");
            }
        })
       
      } 
    catch(err) {
        res.status(401).send(err);
      }
    
    
})


router.get('/stuApply/:id',(req,res)=>{
    let id=req.params.id;

    const token=req.headers['authorization'];
    try {
        const decoded = jwt.verify(token, 'shhhh');
        
        var query={
               job:id
        }
        console.log(query);
        AppliedJob.find(query,(error,response)=>{
            if(error){
                res.status(500);
                res.send(error);
                return
            }
            console.log(response);
      }) 
      .populate('student').exec(function(err,stud){
         console.log(stud.student.name);
      })
    }
    catch(err) {
        res.status(401).send(err);
      }
})

module.exports=router;